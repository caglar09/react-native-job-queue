{"version":3,"names":["_reactNative","require","_Job","_Uuid","_Worker","_eventemitter","_interopRequireDefault","_Queue","e","__esModule","default","_defineProperty","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","Queue","instance","queueInstance","isRunning","isActive","registeredWorkers","workers","constructor","EventEmitter","job","jobStore","updateJob","active","FALSE","finishQueue","nextJob","getNextJob","isJobNotEmpty","nextJobs","getJobsForWorker","workerName","processingJobs","map","limitExecution","excuteJob","Promise","all","isExecuting","scheduleQueue","executer","rawJob","resolve","enqueueJobExecuter","isExecuterAvailable","runExecuter","queuedJobExecuter","push","bind","length","shift","worker","payload","JSON","parse","status","stringify","emitter","emit","activeJobCount","Error","promise","execute","runningJobPromises","id","triggerSuccess","removeJob","err","error","attempts","errors","failedAttempts","metaData","failed","Date","toISOString","triggerFailure","failedJob","decreaseExecutionCount","triggerCompletion","executedJobs","NativeModules","JobQueue","timeoutId","updateInterval","onQueueFinish","concurrency","on","event","listener","off","getJobs","getJobsWithDeleted","removeJobPermanent","removeJobPermanently","requeueJob","configure","options","addWorker","name","removeWorker","deleteRelatedJobs","removeJobsByWorkerName","addJob","timeout","priority","startQueue","Uuid","v4","created","isDeleted","start","resetActiveJobs","stop","cancelJob","jobId","exception","undefined","CANCEL","console","warn","activeMarkedJobs","getActiveMarkedJobs","resetTasks","resetActiveJob","AppState","currentState","Platform","OS","setTimeout","runQueue","keys","clearTimeout","isBusy","availableExecuters","getJobsForAlternateWorker","getJobsForWorkerWithDeleted","exports","_default"],"sources":["Queue.ts"],"sourcesContent":["import { AppState, NativeModules, Platform } from 'react-native';\n\nimport { FALSE, Job, RawJob, JobStatus } from './models/Job';\nimport { JobStore } from './models/JobStore';\nimport { Uuid } from './utils/Uuid';\nimport { Worker, CANCEL, CancellablePromise } from './Worker';\n\n\nimport EventEmitter from 'eventemitter3';\n\n/**\n * Events emitted by the Queue.\n */\nexport interface QueueEvents {\n    /**\n     * Fired when a worker is added.\n     * @param workerName Name of the worker.\n     */\n    workerAdded: (workerName: string) => void;\n\n    /**\n     * Fired when a job is added to the queue.\n     * @param job The RawJob that was added.\n     */\n    jobAdded: (job: RawJob) => void;\n\n    /**\n     * Fired when a job starts processing.\n     * @param job The RawJob that started.\n     */\n    jobStarted: (job: RawJob) => void;\n\n    /**\n     * Fired when a job completes successfully.\n     * @param job The Job with payload that succeeded.\n     */\n    jobSucceeded: (job: Job<any>) => void;\n\n    /**\n     * Fired when a job fails.\n     * @param job The RawJob that failed.\n     * @param error The error thrown.\n     */\n    jobFailed: (job: RawJob, error: Error) => void;\n\n    /**\n     * Fired when a job completes (regardless of success or failure).\n     * @param job The RawJob that finished.\n     */\n    jobCompleted: (job: RawJob) => void;\n}\n\n\n/**\n * Options to configure the queue\n */\nexport interface QueueOptions {\n    /**\n     * A callback function which is called after the queue has been stopped\n     * @parameter executedJobs\n     */\n    onQueueFinish?: (executedJobs: Array<Job<any>>) => void;\n    /**\n     * Interval in which the queue checks for new jobs to execute\n     */\n    updateInterval?: number;\n    concurrency?: number;\n}\n/**\n * ## Usage\n *\n * ```typescript\n * import queue from 'react-native-job-queue'\n *\n * queue.configure({onQueueFinish:(executedJobs:Job[])=>{\n *      console.log(\"Queue stopped and executed\",executedJobs)\n * }});\n * queue.addWorker(new Worker(\"testWorker\",async(payload, id)=>{\n *      return new Promise((resolve) => {\n *      setTimeout(() => {\n *          console.log('Executing jobId', id, 'with:', payload.text);\n *          resolve();\n *      }, payload.delay);});\n * }))\n * queue.addJob(\"testWorker\",{text:\"Job example payload content text\",delay:5000})\n * ```\n */\nexport class Queue {\n    static get instance() {\n        if (this.queueInstance) {\n            return this.queueInstance;\n        } else {\n            this.queueInstance = new Queue();\n            return this.queueInstance;\n        }\n    }\n    /**\n     * @returns true if the Queue is running and false otherwise\n     */\n    get isRunning() {\n        return this.isActive;\n    }\n    /**\n     * @returns the workers map (readonly)\n     */\n    get registeredWorkers() {\n        return this.workers;\n    }\n    private static queueInstance: Queue | null;\n    private emitter: EventEmitter<QueueEvents> = new EventEmitter<QueueEvents>();\n\n    private jobStore: JobStore;\n    private workers: { [key: string]: Worker<any> };\n    private isActive: boolean;\n\n    private timeoutId: number;\n    private executedJobs: Array<Job<any>>;\n    private activeJobCount: number;\n\n    private concurrency: number;\n    private updateInterval: number;\n    private onQueueFinish: (executedJobs: Array<Job<any>>) => void;\n\n    private queuedJobExecuter: any[] = [];\n    private runningJobPromises: { [key: string]: CancellablePromise<any> };\n\n    private constructor() {\n        this.jobStore = NativeModules.JobQueue;\n        this.workers = {};\n        this.runningJobPromises = {};\n        this.isActive = false;\n\n        this.timeoutId = 0;\n        this.executedJobs = [];\n        this.activeJobCount = 0;\n\n        this.updateInterval = 10;\n        this.onQueueFinish = (executedJobs: Array<Job<any>>) => { };\n        this.concurrency = -1;\n    }\n\n    /**\n     * Subscribe to queue events.\n     */\n    public on<K extends keyof QueueEvents>(event: K, listener: QueueEvents[K]): void {\n        this.emitter.on(event, listener as any);\n    }\n\n    /**\n     * Unsubscribe from queue events.\n     */\n    public off<K extends keyof QueueEvents>(event: K, listener: QueueEvents[K]): void {\n        this.emitter.off(event, listener as any);\n    }\n\n    /**\n     * @returns a promise that resolves all jobs of jobStore\n     */\n    async getJobs() {\n        return await this.jobStore.getJobs();\n    }\n    async getJobsWithDeleted() {\n        return await this.jobStore.getJobsWithDeleted();\n    }\n    /**\n     * @param job the job to be deleted\n     */\n    removeJob(job: RawJob) {\n        return this.jobStore.removeJob(job);\n    }\n    removeJobPermanent(job: RawJob) {\n        return this.jobStore.removeJobPermanently(job);\n    }\n    /**\n     * @param job the job which should be requeued\n     */\n    requeueJob(job: RawJob) {\n        return this.jobStore.updateJob({ ...job, failed: '' });\n    }\n\n    configure(options: QueueOptions) {\n        const {\n            onQueueFinish = (executedJobs: Array<Job<any>>) => { },\n            updateInterval = 10,\n            concurrency = -1,\n        } = options;\n        this.onQueueFinish = onQueueFinish;\n        this.updateInterval = updateInterval;\n        this.concurrency = concurrency;\n    }\n    /**\n     * adds a [[Worker]] to the queue which can execute Jobs\n     * @param worker\n     */\n    addWorker(worker: Worker<any>) {\n        if (this.workers[worker.name]) {\n            throw new Error(`Worker \"${worker.name}\" already exists.`);\n        }\n        this.workers[worker.name] = worker;\n        this.emitter.emit('workerAdded', worker.name);\n    }\n\n    /**\n     * removes worker from queue\n     *\n     * @param name\n     * @param [deleteRelatedJobs=false] removes all queued jobs releated to the worker if set to true\n     */\n    removeWorker(name: string, deleteRelatedJobs = false) {\n        delete this.workers[name];\n        if (deleteRelatedJobs) {\n            this.jobStore.removeJobsByWorkerName(name);\n        }\n    }\n\n    /**\n     * adds a job to the queue\n     * @param workerName name of the worker which should be used to excute the job\n     * @param [payload={}] payload which is passed as parameter to the executer\n     * @param [options={ attempts: 0, timeout: 0, priority: 0 }] options to set max attempts, a timeout and a priority\n     * @param [startQueue=true] if set to false the queue won't start automaticly when adding a job\n     * @returns job id\n     */\n    addJob<P extends object>(\n        workerName: string,\n        payload: P,\n        options = { attempts: 0, timeout: 0, priority: 0 },\n        startQueue = true\n    ) {\n        const { attempts = 0, timeout = 0, priority = 0 } = options;\n        const id: string = Uuid.v4();\n        const job: RawJob = {\n            id,\n            payload: JSON.stringify(payload || {}),\n            metaData: JSON.stringify({ failedAttempts: 0, errors: [] }),\n            active: FALSE,\n            created: new Date().toISOString(),\n            failed: '',\n            workerName,\n            attempts,\n            timeout,\n            priority,\n            isDeleted: false,\n            status: \"idle\"\n        };\n        if (!this.workers[job.workerName]) {\n            throw new Error(`Missing worker with name ${job.workerName}`);\n        }\n\n        this.jobStore.addJob(job);\n        this.emitter.emit('jobAdded', job);\n        if (startQueue && !this.isActive) {\n            this.start();\n        }\n\n        return id;\n    }\n    /**\n     * starts the queue to execute queued jobs\n     */\n    async start() {\n        if (!this.isActive) {\n            this.isActive = true;\n            this.executedJobs = [];\n            await this.resetActiveJobs();\n            this.scheduleQueue();\n        }\n    }\n    /**\n     * stop the queue from executing queued jobs\n     */\n    stop() {\n        this.isActive = false;\n    }\n\n    /**\n     * cancel running job\n     */\n    cancelJob(jobId: string, exception?: Error) {\n        const promise = this.runningJobPromises[jobId];\n        if (promise !== undefined && typeof promise[CANCEL] === 'function') {\n            promise[CANCEL](exception || new Error(`canceled`));\n        } else if (!promise[CANCEL]) {\n            console.warn('Worker does not have a cancel method implemented');\n        } else {\n            throw new Error(`Job with id ${jobId} not currently running`);\n        }\n    }\n    private resetActiveJob = (job: RawJob) => {\n        this.jobStore.updateJob({ ...job, ...{ active: FALSE } });\n    };\n    private async resetActiveJobs() {\n        const activeMarkedJobs = await this.jobStore.getActiveMarkedJobs();\n        const resetTasks = activeMarkedJobs.map(this.resetActiveJob);\n        await Promise.all(resetTasks);\n    }\n    private scheduleQueue() {\n        if (AppState.currentState === 'active' && Platform.OS === \"ios\") {\n            this.timeoutId = setTimeout(this.runQueue, this.updateInterval);\n        } else {\n            this.runQueue();\n        }\n    }\n    private runQueue = async () => {\n        if (!this.isActive) {\n            this.finishQueue();\n            return;\n        }\n        const nextJob = await this.jobStore.getNextJob();\n        if (this.isJobNotEmpty(nextJob)) {\n            const nextJobs = await this.getJobsForWorker(nextJob.workerName);\n            const processingJobs = nextJobs.map(async (job) => this.limitExecution(this.excuteJob, job));\n            await Promise.all(processingJobs);\n        } else if (!this.isExecuting()) {\n            this.finishQueue();\n            return;\n        }\n        this.scheduleQueue();\n    };\n\n    private isJobNotEmpty(rawJob: RawJob | {}) {\n        return Object.keys(rawJob).length > 0;\n    }\n\n    private limitExecution = async (executer: (rawJob: RawJob) => Promise<void>, rawJob: RawJob) => {\n        return new Promise(async (resolve) => await this.enqueueJobExecuter(executer, resolve, rawJob));\n    };\n\n    private enqueueJobExecuter = async (\n        executer: (rawJob: RawJob) => Promise<void>,\n        resolve: (_: unknown) => void,\n        rawJob: RawJob\n    ) => {\n        if (this.isExecuterAvailable()) {\n            await this.runExecuter(executer, resolve, rawJob);\n        } else {\n            this.queuedJobExecuter.push(this.runExecuter.bind(null, executer, resolve, rawJob));\n        }\n    };\n\n    private runExecuter = async (\n        executer: (rawJob: RawJob) => Promise<void>,\n        resolve: (_: unknown) => void,\n        rawJob: RawJob\n    ) => {\n        try {\n            await executer(rawJob);\n        } finally {\n            resolve(true);\n            if (this.queuedJobExecuter.length > 0 && this.isExecuterAvailable()) {\n                await this.queuedJobExecuter.shift()();\n            }\n        }\n    };\n    private isExecuterAvailable() {\n        return this.concurrency <= 0 || this.activeJobCount < this.concurrency;\n    }\n    private isExecuting() {\n        return this.activeJobCount > 0;\n    }\n\n    private finishQueue() {\n        this.onQueueFinish(this.executedJobs);\n        this.isActive = false;\n        clearTimeout(this.timeoutId);\n    }\n\n    async getJobsForWorker(workerName: string) {\n        const { isBusy, availableExecuters } = this.workers[workerName];\n        if (!isBusy) {\n            return await this.jobStore.getJobsForWorker(workerName, availableExecuters);\n        } else {\n            return await this.getJobsForAlternateWorker();\n        }\n    }\n\n    async getJobsForWorkerWithDeleted(workerName: string) {\n        const { isBusy, availableExecuters } = this.workers[workerName];\n        if (!isBusy) {\n            return await this.jobStore.getJobsForWorkerWithDeleted(workerName, availableExecuters);\n        } else {\n            return await this.getJobsForAlternateWorker();\n        }\n    }\n\n    private async getJobsForAlternateWorker() {\n        for (const workerName of Object.keys(this.workers)) {\n            const { isBusy, availableExecuters } = this.workers[workerName];\n            let nextJobs: RawJob[] = [];\n            if (!isBusy) {\n                nextJobs = await this.jobStore.getJobsForWorker(workerName, availableExecuters);\n            }\n            if (nextJobs.length > 0) {\n                return nextJobs;\n            }\n        }\n        return [];\n    }\n\n    private excuteJob = async (rawJob: RawJob) => {\n        const worker = this.workers[rawJob.workerName];\n        const payload = JSON.parse(rawJob.payload) as Worker<any>;\n        const job = { ...rawJob, ...{ payload } } as Job<any>;\n\n        try {\n            job.status = \"processing\";\n            this.jobStore.updateJob({ ...job, payload: JSON.stringify(payload) });\n            this.emitter.emit('jobStarted', job);\n\n            this.activeJobCount++;\n            if (!this.workers[rawJob.workerName]) {\n                throw new Error(`Missing worker with name ${rawJob.workerName}`);\n            }\n            const promise = worker.execute(rawJob);\n\n            this.runningJobPromises[rawJob.id] = promise;\n            await promise;\n\n            worker.triggerSuccess(job);\n            job.status = \"finished\";\n            this.jobStore.updateJob({ ...job, payload: JSON.stringify(payload) });\n            this.jobStore.removeJob(rawJob);\n            this.emitter.emit('jobSucceeded', job);\n        } catch (err) {\n            const error = err as Error;\n            const { attempts } = rawJob;\n            // eslint-disable-next-line prefer-const\n            let { errors, failedAttempts } = JSON.parse(rawJob.metaData) as { errors: string[]; failedAttempts: number };\n            failedAttempts++;\n            let failed = '';\n            if (failedAttempts >= attempts) {\n                failed = new Date().toISOString();\n            }\n            const metaData = JSON.stringify({ errors: [...errors, error], failedAttempts });\n            worker.triggerFailure({ ...job, metaData, failed }, error);\n            const failedJob = { ...rawJob, ...{ active: FALSE, metaData, failed, status: \"failed\" } } as RawJob;\n            this.jobStore.updateJob(failedJob);\n            this.emitter.emit('jobFailed', failedJob, error);\n        } finally {\n            delete this.runningJobPromises[job.id];\n            worker.decreaseExecutionCount();\n            worker.triggerCompletion(job);\n            this.emitter.emit('jobCompleted', { ...job });\n            this.executedJobs.push(rawJob);\n            this.activeJobCount--;\n        }\n    };\n}\nexport default Queue.instance;\n"],"mappings":"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","ignoreList":[]}