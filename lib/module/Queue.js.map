{"version":3,"names":["AppState","NativeModules","Platform","FALSE","TRUE","Uuid","CANCEL","EventEmitter","QueueError","Error","constructor","message","code","_defineProperty","name","Queue","instance","queueInstance","isRunning","isActive","registeredWorkers","workers","job","jobStore","updateJob","active","finishQueue","nextJob","getWorkInProgressJob","getNextJob","isJobNotEmpty","nextJobs","getJobsForWorker","workerName","processingJobs","map","limitExecution","excuteJob","Promise","all","isExecuting","scheduleQueue","executer","rawJob","resolve","enqueueJobExecuter","isExecuterAvailable","runExecuter","queuedJobExecuter","push","bind","length","shift","worker","payload","JSON","parse","status","stringify","emit","activeJobCount","promise","execute","runningJobPromises","id","triggerSuccess","removeJob","err","error","attempts","errors","failedAttempts","metaData","failed","Date","toISOString","triggerFailure","failedJob","decreaseExecutionCount","triggerCompletion","executedJobs","JobQueue","timeoutId","updateInterval","onQueueFinish","concurrency","getJobs","getJobsWithDeleted","removeJobPermanent","removeJobPermanently","requeueJob","start","then","console","log","catch","configure","options","addWorker","removeWorker","deleteRelatedJobs","removeJobsByWorkerName","addJob","timeout","priority","startQueue","v4","created","isDeleted","resetActiveJobs","stop","cancelJob","jobId","exception","undefined","warn","cancelAllActiveJobs","jobs","forEach","newJob","Boolean","cancelActiveJob","activeMarkedJobs","getActiveMarkedJobs","resetTasks","resetActiveJob","currentState","OS","setTimeout","runQueue","Object","keys","clearTimeout","isBusy","availableExecuters","getJobsForAlternateWorker","getJobsForWorkerWithDeleted","_Queue"],"sources":["Queue.ts"],"sourcesContent":["/* eslint-disable no-extra-boolean-cast */\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport { AppState, NativeModules, Platform } from 'react-native';\n\nimport { FALSE, Job, RawJob, TRUE } from './models/Job';\nimport { JobStore } from './models/JobStore';\nimport { Uuid } from './utils/Uuid';\nimport { Worker, CANCEL, CancellablePromise } from './Worker';\n\n\nimport EventEmitter from 'eventemitter3';\n\ntype QueueErrorType = \"cancelled\" | \"error\";\n\nexport class QueueError extends Error {\n    code: QueueErrorType;\n    constructor(message: string, code: QueueErrorType = \"error\") {\n        super(message);\n        this.name = 'QueueError';\n        this.code = code;\n    }\n}\n\n/**\n * Events emitted by the Queue.\n */\nexport interface QueueEvents {\n    /**\n     * Fired when a worker is added.\n     * @param workerName Name of the worker.\n     */\n    workerAdded: (workerName: string) => void;\n\n    /**\n     * Fired when a job is added to the queue.\n     * @param job The RawJob that was added.\n     */\n    jobAdded: (job: RawJob) => void;\n\n    /**\n     * Fired when a job starts processing.\n     * @param job The RawJob that started.\n     */\n    jobStarted: (job: RawJob) => void;\n\n    /**\n     * Fired when a job completes successfully.\n     * @param job The Job with payload that succeeded.\n     */\n    jobSucceeded: (job: Job<any>) => void;\n\n    /**\n     * Fired when a job fails.\n     * @param job The RawJob that failed.\n     * @param error The error thrown.\n     */\n    jobFailed: (job: RawJob, error: Error) => void;\n\n    /**\n     * Fired when a job fails.\n     * @param job The RawJob that failed.\n     * @param error The error thrown.\n     */\n    jobCancelled: (job: RawJob) => void;\n\n    /**\n     * Fired when a job completes (regardless of success or failure).\n     * @param job The RawJob that finished.\n     */\n    jobCompleted: (job: RawJob) => void;\n\n    jobDeleted: (job: RawJob) => void\n}\n\n\n/**\n * Options to configure the queue\n */\nexport interface QueueOptions {\n    /**\n     * A callback function which is called after the queue has been stopped\n     * @parameter executedJobs\n     */\n    onQueueFinish?: (executedJobs: Array<Job<any>>) => void;\n    /**\n     * Interval in which the queue checks for new jobs to execute\n     */\n    updateInterval?: number;\n    concurrency?: number;\n}\n/**\n * ## Usage\n *\n * ```typescript\n * import queue from 'react-native-job-queue'\n *\n * queue.configure({onQueueFinish:(executedJobs:Job[])=>{\n *      console.log(\"Queue stopped and executed\",executedJobs)\n * }});\n * queue.addWorker(new Worker(\"testWorker\",async(payload, id)=>{\n *      return new Promise((resolve) => {\n *      setTimeout(() => {\n *          console.log('Executing jobId', id, 'with:', payload.text);\n *          resolve();\n *      }, payload.delay);});\n * }))\n * queue.addJob(\"testWorker\",{text:\"Job example payload content text\",delay:5000})\n * ```\n */\nexport class Queue extends EventEmitter<QueueEvents> {\n    static get instance() {\n        if (this.queueInstance) {\n            return this.queueInstance;\n        } else {\n            this.queueInstance = new Queue();\n            return this.queueInstance;\n        }\n    }\n    /**\n     * @returns true if the Queue is running and false otherwise\n     */\n    get isRunning() {\n        return this.isActive;\n    }\n    /**\n     * @returns the workers map (readonly)\n     */\n    get registeredWorkers() {\n        return this.workers;\n    }\n    private static queueInstance: Queue | null;\n    private emitter: EventEmitter<QueueEvents> = new EventEmitter<QueueEvents>();\n\n    private jobStore: JobStore;\n    private workers: { [key: string]: Worker<any> };\n    private isActive: boolean;\n\n    private timeoutId: number;\n    private executedJobs: Array<Job<any>>;\n    private activeJobCount: number;\n\n    private concurrency: number;\n    private updateInterval: number;\n    private onQueueFinish: (executedJobs: Array<Job<any>>) => void;\n\n    private queuedJobExecuter: any[] = [];\n    private runningJobPromises: { [key: string]: CancellablePromise<any> };\n\n    private constructor() {\n        super();\n        this.jobStore = NativeModules.JobQueue;\n        this.workers = {};\n        this.runningJobPromises = {};\n        this.isActive = false;\n\n        this.timeoutId = 0;\n        this.executedJobs = [];\n        this.activeJobCount = 0;\n\n        this.updateInterval = 10;\n        this.onQueueFinish = (executedJobs: Array<Job<any>>) => { };\n        this.concurrency = -1;\n    }\n\n\n\n    /**\n     * @returns a promise that resolves all jobs of jobStore\n     */\n    async getJobs() {\n        return await this.jobStore.getJobs();\n    }\n    async getJobsWithDeleted() {\n        return await this.jobStore.getJobsWithDeleted();\n    }\n    /**\n     * @param job the job to be deleted\n     */\n    removeJob(job: RawJob) {\n        this.jobStore.removeJob(job);\n        this.emit(\"jobDeleted\", job)\n    }\n    removeJobPermanent(job: RawJob) {\n        this.jobStore.removeJobPermanently(job);\n        this.emit(\"jobDeleted\", job)\n    }\n    /**\n     * @param job the job which should be requeued\n     */\n    requeueJob(job: RawJob) {\n        this.jobStore.updateJob({ ...job, failed: '', status: \"idle\", active: TRUE });\n\n        if (!this.isActive) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            this.start().then(() => {\n                console.log(\"Queue restarted\")\n            }).catch(() => {\n                console.log(\"Queue could not be restarted\")\n            });\n        }\n    }\n\n    configure(options: QueueOptions) {\n        const {\n            onQueueFinish = (executedJobs: Array<Job<any>>) => { },\n            updateInterval = 10,\n            concurrency = -1,\n        } = options;\n        this.onQueueFinish = onQueueFinish;\n        this.updateInterval = updateInterval;\n        this.concurrency = concurrency;\n    }\n    /**\n     * adds a [[Worker]] to the queue which can execute Jobs\n     * @param worker\n     */\n    addWorker(worker: Worker<any>) {\n        if (this.workers[worker.name]) {\n            throw new QueueError(`Worker \"${worker.name}\" already exists.`, \"error\");\n        }\n        this.workers[worker.name] = worker;\n        this.emit('workerAdded', worker.name);\n    }\n\n    /**\n     * removes worker from queue\n     *\n     * @param name\n     * @param [deleteRelatedJobs=false] removes all queued jobs releated to the worker if set to true\n     */\n    removeWorker(name: string, deleteRelatedJobs = false) {\n        delete this.workers[name];\n        if (deleteRelatedJobs) {\n            this.jobStore.removeJobsByWorkerName(name);\n        }\n    }\n\n    /**\n     * adds a job to the queue\n     * @param workerName name of the worker which should be used to excute the job\n     * @param [payload={}] payload which is passed as parameter to the executer\n     * @param [options={ attempts: 0, timeout: 0, priority: 0 }] options to set max attempts, a timeout and a priority\n     * @param [startQueue=true] if set to false the queue won't start automaticly when adding a job\n     * @returns job id\n     */\n    addJob<P extends object>(\n        workerName: string,\n        payload: P,\n        options = { attempts: 0, timeout: 0, priority: 0 },\n        startQueue = true\n    ) {\n        const { attempts = 0, timeout = 0, priority = 0 } = options;\n        const id: string = Uuid.v4();\n        const job: RawJob = {\n            id,\n            payload: JSON.stringify(payload || {}),\n            metaData: JSON.stringify({ failedAttempts: 0, errors: [] }),\n            active: FALSE,\n            created: new Date().toISOString(),\n            failed: '',\n            workerName,\n            attempts,\n            timeout,\n            priority,\n            isDeleted: false,\n            status: \"idle\"\n        };\n        if (!this.workers[job.workerName]) {\n            throw new QueueError(`Missing worker with name ${job.workerName}`);\n        }\n\n        this.jobStore.addJob(job);\n        this.emit('jobAdded', job);\n        if (startQueue && !this.isActive) {\n            this.start();\n        }\n\n        return id;\n    }\n    /**\n     * starts the queue to execute queued jobs\n     */\n    async start() {\n        if (!this.isActive) {\n            this.isActive = true;\n            this.executedJobs = [];\n            await this.resetActiveJobs();\n            this.scheduleQueue();\n        }\n    }\n    /**\n     * stop the queue from executing queued jobs\n     */\n    stop() {\n        this.isActive = false;\n    }\n\n    /**\n     * cancel running job\n     */\n    cancelJob(jobId: string, exception?: Error) {\n        const promise = this.runningJobPromises[jobId];\n        if (promise !== undefined && typeof promise[CANCEL] === 'function') {\n            promise[CANCEL](exception || new QueueError(`job canceled`, \"cancelled\"));\n        } else if (!promise[CANCEL]) {\n            console.warn('Worker does not have a cancel method implemented');\n        } else {\n            throw new QueueError(`Job with id ${jobId} not currently running`, \"error\");\n        }\n    }\n    async cancelAllActiveJobs() {\n        const jobs = await this.jobStore.getJobs()\n\n        jobs.forEach((job) => {\n            const newJob = { ...job, ...{ active: FALSE, status: \"cancelled\" } };\n            const isRunning = this.runningJobPromises[job.id];\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            if (!!Boolean(isRunning)) {\n                this.cancelJob(job.id, new QueueError(`Job with id ${job.id} cancelled`, \"cancelled\"));\n            }\n            this.jobStore.updateJob(newJob as RawJob);\n            this.emit('jobCancelled', newJob as RawJob);\n        })\n    }\n    cancelActiveJob(job: RawJob) {\n        const newJob = { ...job, ...{ active: FALSE, status: \"cancelled\" } };\n\n        const isRunning = this.runningJobPromises[job.id];\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        if (!!isRunning) {\n            this.cancelJob(job.id, new QueueError(`Job with id ${job.id} cancelled`, \"cancelled\"));\n        }\n\n        this.jobStore.updateJob(newJob as RawJob);\n\n        this.emit('jobCancelled', newJob as RawJob);\n    }\n\n    private resetActiveJob = (job: RawJob) => {\n        this.jobStore.updateJob({ ...job, ...{ active: FALSE } });\n    };\n    private async resetActiveJobs() {\n        const activeMarkedJobs = await this.jobStore.getActiveMarkedJobs();\n        const resetTasks = activeMarkedJobs.map(this.resetActiveJob);\n        await Promise.all(resetTasks);\n    }\n    private scheduleQueue() {\n        if (AppState.currentState === 'active' && Platform.OS === \"ios\") {\n            this.timeoutId = setTimeout(this.runQueue, this.updateInterval);\n        } else {\n            this.runQueue();\n        }\n    }\n    private runQueue = async () => {\n        if (!this.isActive) {\n            this.finishQueue();\n            return;\n        }\n        let nextJob = await this.jobStore.getWorkInProgressJob();\n        if (!nextJob) {\n            nextJob = await this.jobStore.getNextJob();\n        }\n        if (this.isJobNotEmpty(nextJob)) {\n            const nextJobs = await this.getJobsForWorker(nextJob.workerName);\n            const processingJobs = nextJobs.map(async (job) => this.limitExecution(this.excuteJob, job));\n            await Promise.all(processingJobs);\n        } else if (!this.isExecuting()) {\n            this.finishQueue();\n            return;\n        }\n        this.scheduleQueue();\n    };\n\n    private isJobNotEmpty(rawJob: RawJob | {}) {\n        return Object.keys(rawJob).length > 0;\n    }\n\n    private limitExecution = async (executer: (rawJob: RawJob) => Promise<void>, rawJob: RawJob) => {\n        return new Promise(async (resolve) => await this.enqueueJobExecuter(executer, resolve, rawJob));\n    };\n\n    private enqueueJobExecuter = async (\n        executer: (rawJob: RawJob) => Promise<void>,\n        resolve: (_: unknown) => void,\n        rawJob: RawJob\n    ) => {\n        if (this.isExecuterAvailable()) {\n            await this.runExecuter(executer, resolve, rawJob);\n        } else {\n            this.queuedJobExecuter.push(this.runExecuter.bind(null, executer, resolve, rawJob));\n        }\n    };\n\n    private runExecuter = async (\n        executer: (rawJob: RawJob) => Promise<void>,\n        resolve: (_: unknown) => void,\n        rawJob: RawJob\n    ) => {\n        try {\n            await executer(rawJob);\n        } finally {\n            resolve(true);\n            if (this.queuedJobExecuter.length > 0 && this.isExecuterAvailable()) {\n                await this.queuedJobExecuter.shift()();\n            }\n        }\n    };\n    private isExecuterAvailable() {\n        return this.concurrency <= 0 || this.activeJobCount < this.concurrency;\n    }\n    private isExecuting() {\n        return this.activeJobCount > 0;\n    }\n\n    private finishQueue() {\n        this.onQueueFinish(this.executedJobs);\n        this.isActive = false;\n        clearTimeout(this.timeoutId);\n    }\n\n    async getJobsForWorker(workerName: string) {\n        const { isBusy, availableExecuters } = this.workers[workerName];\n        if (!isBusy) {\n            return await this.jobStore.getJobsForWorker(workerName, availableExecuters);\n        } else {\n            return await this.getJobsForAlternateWorker();\n        }\n    }\n\n    async getJobsForWorkerWithDeleted(workerName: string) {\n        const { isBusy, availableExecuters } = this.workers[workerName];\n        if (!isBusy) {\n            return await this.jobStore.getJobsForWorkerWithDeleted(workerName, availableExecuters);\n        } else {\n            return await this.getJobsForAlternateWorker();\n        }\n    }\n\n    private async getJobsForAlternateWorker() {\n        for (const workerName of Object.keys(this.workers)) {\n            const { isBusy, availableExecuters } = this.workers[workerName];\n            let nextJobs: RawJob[] = [];\n            if (!isBusy) {\n                nextJobs = await this.jobStore.getJobsForWorker(workerName, availableExecuters);\n            }\n            if (nextJobs.length > 0) {\n                return nextJobs;\n            }\n        }\n        return [];\n    }\n\n    private excuteJob = async (rawJob: RawJob) => {\n        const worker = this.workers[rawJob.workerName];\n        const payload = JSON.parse(rawJob.payload) as Worker<any>;\n        const job = { ...rawJob, ...{ payload } } as Job<any>;\n\n        try {\n            job.status = \"processing\";\n            this.jobStore.updateJob({ ...job, payload: JSON.stringify(payload) });\n            this.emit('jobStarted', job);\n\n            this.activeJobCount++;\n            if (!this.workers[rawJob.workerName]) {\n                throw new QueueError(`Missing worker with name ${rawJob.workerName}`, \"error\");\n            }\n            const promise = worker.execute(rawJob);\n\n            this.runningJobPromises[rawJob.id] = promise;\n            await promise;\n\n            worker.triggerSuccess(job);\n            job.status = \"finished\";\n            this.jobStore.updateJob({ ...job, payload: JSON.stringify(payload) });\n            this.jobStore.removeJob(rawJob);\n            this.emit('jobSucceeded', job);\n        } catch (err) {\n            const error = err as QueueError;\n            const { attempts } = rawJob;\n            // eslint-disable-next-line prefer-const\n            let { errors, failedAttempts } = JSON.parse(rawJob.metaData) as { errors: string[]; failedAttempts: number };\n            failedAttempts++;\n            let failed = '';\n            if (failedAttempts >= attempts) {\n                failed = new Date().toISOString();\n            }\n            const metaData = JSON.stringify({ errors: [...errors, error], failedAttempts });\n            worker.triggerFailure({ ...job, metaData, failed }, error);\n            const failedJob = { ...rawJob, ...{ active: FALSE, metaData, failed, status: error.code === \"cancelled\" ? \"cancelled\" : \"failed\" } } as RawJob;\n            this.jobStore.updateJob(failedJob);\n            this.emit('jobFailed', failedJob, error);\n        } finally {\n            delete this.runningJobPromises[job.id];\n            worker.decreaseExecutionCount();\n            worker.triggerCompletion(job);\n            this.emit('jobCompleted', { ...job });\n            this.executedJobs.push(rawJob);\n            this.activeJobCount--;\n        }\n    };\n}\nexport default Queue.instance;\n"],"mappings":"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","ignoreList":[]}