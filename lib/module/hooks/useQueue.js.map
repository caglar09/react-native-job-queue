{"version":3,"names":["useState","useEffect","useCallback","useMemo","queue","useQueue","activeJobs","setActiveJobs","lastCompletedJobs","setLastCompletedJobs","queuedCount","filter","j","status","length","activeCount","failedCount","completedCount","refreshJobs","all","getJobs","allWithDeleted","getJobsWithDeleted","completed","isDeleted","onJobAdded","job","prev","onJobStarted","map","id","onJobFailed","onJobSucceeded","onJobDeleted","on","off"],"sources":["useQueue.tsx"],"sourcesContent":["// src/hooks/useQueue.tsx\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport queue from '../Queue';\nimport { RawJob } from '../models/Job';\nimport { Job } from '../models/Job';\n\nexport interface UseQueueState {\n    queuedCount: number;\n    activeCount: number;\n    failedCount: number;\n    completedCount: number;\n    activeJobs: RawJob[];\n    lastCompletedJobs: RawJob[];\n    refreshJobs: () => Promise<void>;\n}\n\n/**\n * useQueue hook\n *\n * Tracks the queue state:\n * - queuedCount: number of jobs waiting to start (status === 'idle')\n * - activeCount: number of jobs currently processing\n * - failedCount: number of jobs that have failed\n * - completedCount: number of jobs that have completed successfully\n * - activeJobs: list of current non-deleted jobs\n * - lastCompletedJobs: list of jobs marked as deleted (completed)\n */\nexport function useQueue(): UseQueueState {\n    const [activeJobs, setActiveJobs] = useState<RawJob[]>([]);\n    const [lastCompletedJobs, setLastCompletedJobs] = useState<RawJob[]>([]);\n\n    // Derive counts from job statuses\n    const queuedCount = useMemo(() => activeJobs.filter((j) => j.status === 'idle').length, [activeJobs]);\n    const activeCount = useMemo(() => activeJobs.filter((j) => j.status === 'processing').length, [activeJobs]);\n    const failedCount = useMemo(() => activeJobs.filter((j) => j.status === 'failed').length, [activeJobs]);\n    const completedCount = useMemo(() => lastCompletedJobs.length, [lastCompletedJobs]);\n\n    // Yığın içindeki işleri güncelle\n    const refreshJobs = useCallback(async () => {\n        const all = await queue.getJobs();\n        const allWithDeleted = await queue.getJobsWithDeleted();\n        const completed = allWithDeleted.filter((j) => j.isDeleted);\n        setLastCompletedJobs(completed);\n\n        setActiveJobs(all);\n    }, []);\n\n    useEffect(() => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        refreshJobs();\n\n        // Event listener tanımları\n        const onJobAdded = (job: RawJob) => {\n            setActiveJobs((prev) => [...prev, job]);\n        };\n        const onJobStarted = (job: RawJob) => {\n            setActiveJobs((prev) => prev.map((j) => (j.id === job.id ? { ...j, ...job } : j)));\n        };\n        const onJobFailed = (job: RawJob) => {\n            setActiveJobs((prev) => prev.map((j) => (j.id === job.id ? { ...j, ...job } : j)));\n        };\n        const onJobSucceeded = (job: Job<any>) => {\n            setActiveJobs((prev) => prev.filter((j) => j.id !== job.id));\n            setLastCompletedJobs((prev) => [...prev, { ...job }]);\n        };\n        const onJobDeleted = (job: RawJob) => {\n            setActiveJobs((prev) => prev.filter((j) => j.id !== job.id));\n            setLastCompletedJobs((prev) => prev.filter((j) => j.id !== job.id));\n        };\n\n        // Subscribe\n        queue.on('jobAdded', onJobAdded);\n        queue.on('jobStarted', onJobStarted);\n        queue.on('jobFailed', onJobFailed);\n        queue.on('jobSucceeded', onJobSucceeded);\n        queue.on('jobDeleted', onJobDeleted);\n\n        // Cleanup\n        return () => {\n            queue.off('jobAdded', onJobAdded);\n            queue.off('jobStarted', onJobStarted);\n            queue.off('jobFailed', onJobFailed);\n            queue.off('jobSucceeded', onJobSucceeded);\n            queue.off('jobDeleted', onJobDeleted);\n        };\n    }, [refreshJobs]);\n\n    return {\n        queuedCount,\n        activeCount,\n        failedCount,\n        completedCount,\n        activeJobs,\n        lastCompletedJobs,\n        refreshJobs,\n    };\n}\n"],"mappings":"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","ignoreList":[]}