{"version":3,"names":["JobStoreMock","constructor","_defineProperty","addJob","job","jobs","push","Promise","resolve","getJobs","getJobsWithDeleted","getActiveMarkedJobs","filtered","filter","active","getNextJob","failed","sorted","sortJobs","getJobsForWorker","name","count","workerName","slice","getJobsForWorkerWithDeleted","updateJob","rawJob","map","id","removeJob","removeJobPermanently","removeJobsByWorkerName","deleteAllJobs","sortByDate","sort","a","b","Date","created","getTime","sortByPriority","priority","exports"],"sources":["JobQueueMock.ts"],"sourcesContent":["import { RawJob } from '../models/Job';\nimport { JobStore } from '../models/JobStore';\n\nexport class JobStoreMock implements JobStore {\n    jobs: RawJob[] = [];\n    constructor() { }\n\n    addJob(job: RawJob): Promise<void> {\n        this.jobs.push(job);\n        return new Promise((resolve) => resolve());\n    }\n    getJobs(): Promise<RawJob[]> {\n        return new Promise((resolve) => resolve(this.jobs));\n    }\n    getJobsWithDeleted(): Promise<RawJob[]> {\n        return new Promise((resolve) => resolve(this.jobs));\n    }\n    getActiveMarkedJobs(): Promise<RawJob[]> {\n        const filtered = this.jobs.filter((job) => job.active === 1);\n        return new Promise((resolve) => resolve(filtered));\n    }\n    getNextJob(): Promise<RawJob> {\n        // \"SELECT * FROM job WHERE active == 0 AND failed == '' ORDER BY priority,datetime(created) LIMIT 1\"\n        const filtered = this.jobs.filter((job) => job.active === 0 && job.failed === '');\n        const sorted = this.sortJobs(filtered);\n        return new Promise((resolve) => resolve(sorted[0] || {}));\n    }\n    getJobsForWorker(name: string, count: number): Promise<RawJob[]> {\n        const filtered = this.jobs.filter((job) => job.workerName === name);\n        const sorted = this.sortJobs(filtered);\n        return new Promise((resolve) => resolve(sorted.slice(0, count)));\n    }\n    getJobsForWorkerWithDeleted(name: string, count: number): Promise<RawJob[]> {\n        const filtered = this.jobs.filter((job) => job.workerName === name);\n        const sorted = this.sortJobs(filtered);\n        return new Promise((resolve) => resolve(sorted.slice(0, count)));\n    }\n    updateJob(rawJob: RawJob): void {\n        this.jobs = this.jobs.map((job) => {\n            if (rawJob.id === job.id) {\n                return rawJob;\n            }\n            return job;\n        });\n    }\n    removeJob(rawJob: RawJob): void {\n        this.jobs = this.jobs.filter((job) => job.id !== rawJob.id);\n    }\n    removeJobPermanently(rawJob: RawJob): void {\n        this.jobs = this.jobs.filter((job) => job.id !== rawJob.id);\n    }\n    removeJobsByWorkerName(workerName: string): void {\n        this.jobs = this.jobs.filter((job) => job.workerName !== workerName);\n    }\n    deleteAllJobs(): Promise<void> {\n        this.jobs = [];\n        return new Promise((resolve) => resolve());\n    }\n    private sortJobs(jobs: RawJob[]) {\n        // Sort by date ascending\n        const sortByDate = jobs.sort((a, b) => {\n            if (new Date(a.created).getTime() > new Date(b.created).getTime()) {\n                return -1;\n            }\n            return 1;\n        });\n        // Then, sort by priority descending\n        const sortByPriority = sortByDate.sort((a, b) => {\n            if (a.priority > b.priority) {\n                return -1;\n            }\n            return 1;\n        });\n\n        return sortByPriority;\n    }\n}\n"],"mappings":";;;;;;;;;AAGO,MAAMA,YAAY,CAAqB;EAE1CC,WAAWA,CAAA,EAAG;IAAAC,eAAA,eADG,EAAE;EACH;EAEhBC,MAAMA,CAACC,GAAW,EAAiB;IAC/B,IAAI,CAACC,IAAI,CAACC,IAAI,CAACF,GAAG,CAAC;IACnB,OAAO,IAAIG,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC,CAAC,CAAC;EAC9C;EACAC,OAAOA,CAAA,EAAsB;IACzB,OAAO,IAAIF,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC,IAAI,CAACH,IAAI,CAAC,CAAC;EACvD;EACAK,kBAAkBA,CAAA,EAAsB;IACpC,OAAO,IAAIH,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC,IAAI,CAACH,IAAI,CAAC,CAAC;EACvD;EACAM,mBAAmBA,CAAA,EAAsB;IACrC,MAAMC,QAAQ,GAAG,IAAI,CAACP,IAAI,CAACQ,MAAM,CAAET,GAAG,IAAKA,GAAG,CAACU,MAAM,KAAK,CAAC,CAAC;IAC5D,OAAO,IAAIP,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAACI,QAAQ,CAAC,CAAC;EACtD;EACAG,UAAUA,CAAA,EAAoB;IAC1B;IACA,MAAMH,QAAQ,GAAG,IAAI,CAACP,IAAI,CAACQ,MAAM,CAAET,GAAG,IAAKA,GAAG,CAACU,MAAM,KAAK,CAAC,IAAIV,GAAG,CAACY,MAAM,KAAK,EAAE,CAAC;IACjF,MAAMC,MAAM,GAAG,IAAI,CAACC,QAAQ,CAACN,QAAQ,CAAC;IACtC,OAAO,IAAIL,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAACS,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC7D;EACAE,gBAAgBA,CAACC,IAAY,EAAEC,KAAa,EAAqB;IAC7D,MAAMT,QAAQ,GAAG,IAAI,CAACP,IAAI,CAACQ,MAAM,CAAET,GAAG,IAAKA,GAAG,CAACkB,UAAU,KAAKF,IAAI,CAAC;IACnE,MAAMH,MAAM,GAAG,IAAI,CAACC,QAAQ,CAACN,QAAQ,CAAC;IACtC,OAAO,IAAIL,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAACS,MAAM,CAACM,KAAK,CAAC,CAAC,EAAEF,KAAK,CAAC,CAAC,CAAC;EACpE;EACAG,2BAA2BA,CAACJ,IAAY,EAAEC,KAAa,EAAqB;IACxE,MAAMT,QAAQ,GAAG,IAAI,CAACP,IAAI,CAACQ,MAAM,CAAET,GAAG,IAAKA,GAAG,CAACkB,UAAU,KAAKF,IAAI,CAAC;IACnE,MAAMH,MAAM,GAAG,IAAI,CAACC,QAAQ,CAACN,QAAQ,CAAC;IACtC,OAAO,IAAIL,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAACS,MAAM,CAACM,KAAK,CAAC,CAAC,EAAEF,KAAK,CAAC,CAAC,CAAC;EACpE;EACAI,SAASA,CAACC,MAAc,EAAQ;IAC5B,IAAI,CAACrB,IAAI,GAAG,IAAI,CAACA,IAAI,CAACsB,GAAG,CAAEvB,GAAG,IAAK;MAC/B,IAAIsB,MAAM,CAACE,EAAE,KAAKxB,GAAG,CAACwB,EAAE,EAAE;QACtB,OAAOF,MAAM;MACjB;MACA,OAAOtB,GAAG;IACd,CAAC,CAAC;EACN;EACAyB,SAASA,CAACH,MAAc,EAAQ;IAC5B,IAAI,CAACrB,IAAI,GAAG,IAAI,CAACA,IAAI,CAACQ,MAAM,CAAET,GAAG,IAAKA,GAAG,CAACwB,EAAE,KAAKF,MAAM,CAACE,EAAE,CAAC;EAC/D;EACAE,oBAAoBA,CAACJ,MAAc,EAAQ;IACvC,IAAI,CAACrB,IAAI,GAAG,IAAI,CAACA,IAAI,CAACQ,MAAM,CAAET,GAAG,IAAKA,GAAG,CAACwB,EAAE,KAAKF,MAAM,CAACE,EAAE,CAAC;EAC/D;EACAG,sBAAsBA,CAACT,UAAkB,EAAQ;IAC7C,IAAI,CAACjB,IAAI,GAAG,IAAI,CAACA,IAAI,CAACQ,MAAM,CAAET,GAAG,IAAKA,GAAG,CAACkB,UAAU,KAAKA,UAAU,CAAC;EACxE;EACAU,aAAaA,CAAA,EAAkB;IAC3B,IAAI,CAAC3B,IAAI,GAAG,EAAE;IACd,OAAO,IAAIE,OAAO,CAAEC,OAAO,IAAKA,OAAO,CAAC,CAAC,CAAC;EAC9C;EACQU,QAAQA,CAACb,IAAc,EAAE;IAC7B;IACA,MAAM4B,UAAU,GAAG5B,IAAI,CAAC6B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACnC,IAAI,IAAIC,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAIF,IAAI,CAACD,CAAC,CAACE,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;QAC/D,OAAO,CAAC,CAAC;MACb;MACA,OAAO,CAAC;IACZ,CAAC,CAAC;IACF;IACA,MAAMC,cAAc,GAAGP,UAAU,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC7C,IAAID,CAAC,CAACM,QAAQ,GAAGL,CAAC,CAACK,QAAQ,EAAE;QACzB,OAAO,CAAC,CAAC;MACb;MACA,OAAO,CAAC;IACZ,CAAC,CAAC;IAEF,OAAOD,cAAc;EACzB;AACJ;AAACE,OAAA,CAAA1C,YAAA,GAAAA,YAAA","ignoreList":[]}