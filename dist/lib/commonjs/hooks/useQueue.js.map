{"version":3,"names":["_react","require","_Queue","_interopRequireDefault","e","__esModule","default","useQueue","activeJobs","setActiveJobs","useState","lastCompletedJobs","setLastCompletedJobs","queuedCount","useMemo","filter","j","status","length","activeCount","failedCount","completedCount","refreshJobs","useCallback","all","queue","getJobs","allWithDeleted","getJobsWithDeleted","completed","isDeleted","useEffect","onJobAdded","job","prev","onJobStarted","map","id","onJobFailed","onJobSucceeded","on","off"],"sources":["useQueue.tsx"],"sourcesContent":["// src/hooks/useQueue.tsx\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport queue from '../Queue';\nimport { RawJob } from '../models/Job';\nimport { Job } from '../models/Job';\n\nexport interface UseQueueState {\n    queuedCount: number;\n    activeCount: number;\n    failedCount: number;\n    completedCount: number;\n    activeJobs: RawJob[];\n    lastCompletedJobs: RawJob[];\n    refreshJobs: () => void;\n}\n\n/**\n * useQueue hook\n *\n * Tracks the queue state:\n * - queuedCount: number of jobs waiting to start (status === 'idle')\n * - activeCount: number of jobs currently processing\n * - failedCount: number of jobs that have failed\n * - completedCount: number of jobs that have completed successfully\n * - activeJobs: list of current non-deleted jobs\n * - lastCompletedJobs: list of jobs marked as deleted (completed)\n */\nexport function useQueue(): UseQueueState {\n    const [activeJobs, setActiveJobs] = useState<RawJob[]>([]);\n    const [lastCompletedJobs, setLastCompletedJobs] = useState<RawJob[]>([]);\n\n    // Derive counts from job statuses\n    const queuedCount = useMemo(() => activeJobs.filter((j) => j.status === 'idle').length, [activeJobs]);\n    const activeCount = useMemo(() => activeJobs.filter((j) => j.status === 'processing').length, [activeJobs]);\n    const failedCount = useMemo(() => activeJobs.filter((j) => j.status === 'failed').length, [activeJobs]);\n    const completedCount = useMemo(() => lastCompletedJobs.length, [lastCompletedJobs]);\n\n    // Yığın içindeki işleri güncelle\n    const refreshJobs = useCallback(async () => {\n        const all = await queue.getJobs();\n        const allWithDeleted = await queue.getJobsWithDeleted();\n        const completed = allWithDeleted.filter((j) => j.isDeleted);\n        setLastCompletedJobs(completed);\n\n        setActiveJobs(all);\n    }, []);\n\n    useEffect(() => {\n        // İlk yüklemede işleri getir\n        refreshJobs();\n\n        // Event listener tanımları\n        const onJobAdded = (job: RawJob) => {\n            setActiveJobs((prev) => [...prev, job]);\n        };\n        const onJobStarted = (job: RawJob) => {\n            setActiveJobs((prev) => prev.map((j) => (j.id === job.id ? { ...j, ...job } : j)));\n        };\n        const onJobFailed = (job: RawJob) => {\n            setActiveJobs((prev) => prev.map((j) => (j.id === job.id ? { ...j, ...job } : j)));\n        };\n        const onJobSucceeded = (job: Job<any>) => {\n            setActiveJobs((prev) => prev.filter((j) => j.id !== job.id));\n            setLastCompletedJobs((prev) => [...prev, { ...job }]);\n        };\n\n        // Subscribe\n        queue.on('jobAdded', onJobAdded);\n        queue.on('jobStarted', onJobStarted);\n        queue.on('jobFailed', onJobFailed);\n        queue.on('jobSucceeded', onJobSucceeded);\n\n        // Cleanup\n        return () => {\n            queue.off('jobAdded', onJobAdded);\n            queue.off('jobStarted', onJobStarted);\n            queue.off('jobFailed', onJobFailed);\n            queue.off('jobSucceeded', onJobSucceeded);\n        };\n    }, [refreshJobs]);\n\n    return {\n        queuedCount,\n        activeCount,\n        failedCount,\n        completedCount,\n        activeJobs,\n        lastCompletedJobs,\n        refreshJobs,\n    };\n}\n"],"mappings":"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","ignoreList":[]}