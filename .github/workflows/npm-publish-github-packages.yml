name: Build and Release React Native Library (bob)

on:
    push:
        branches:
            - 'release/v*' # Yalnƒ±zca release/v... branch'lerinde √ßalƒ±≈üƒ±r

jobs:
    build-and-release:
        runs-on: ubuntu-latest

        permissions:
            contents: write
            packages: write
            pull-requests: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'

            - name: Extract version from branch name
              id: extract_version
              run: |
                  RAW_VERSION="${GITHUB_REF#refs/heads/release/}"
                  VERSION="${RAW_VERSION#v}"
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
                  echo "BRANCH_NAME=release/v$VERSION" >> $GITHUB_ENV

            - name: Set git identity
              run: |
                  git config user.name "github-actions"
                  git config user.email "github-actions@github.com"

            - name: Update version in package.json if needed
              run: |
                  CURRENT_VERSION=$(node -p "require('./package.json').version")
                  echo "Current version: $CURRENT_VERSION"
                  if [ "$CURRENT_VERSION" != "$VERSION" ]; then
                    echo "Updating package.json version to $VERSION"
                    jq ".version = \"$VERSION\"" package.json > package.tmp.json && mv package.tmp.json package.json
                    git add package.json
                    git commit -m "ci: update version to $VERSION [skip ci]"
                    git push origin HEAD
                  else
                    echo "Version already matches. No update needed."
                  fi

            - name: Install dependencies
              run: yarn

            - name: Build library with bob (prepare script)
              run: npm run prepare

            - name: Check builder-bob output folders
              run: |
                  for dir in lib/commonjs lib/module lib/typescript; do
                    if [ ! -d "$dir" ]; then
                      echo "‚ùå Missing directory: $dir"
                      exit 1
                    fi
                  done
                  echo "‚úÖ All output folders exist."

            - name: Ensure correct 'files' in package.json
              run: |
                  grep '"files"' package.json > /dev/null || {
                    echo "‚ùå 'files' field missing in package.json. Add the following:"
                    echo '  "files": [ "lib/commonjs", "lib/module", "lib/typescript", "src", "index.js" ]'
                    exit 1
                  }
                  echo "‚úÖ 'files' field exists."

            - name: Pack the module
              run: |
                  PACKAGE_FILE=$(yarn pack --filename package.tgz | tail -n 1 | awk '{print $NF}')
                  echo "PACKAGE_FILE=$PACKAGE_FILE" >> $GITHUB_ENV

            - name: Generate release notes
              id: release_notes
              run: |
                  PREV_TAG=$(git describe --tags --abbrev=0 || echo "")
                  if [ -n "$PREV_TAG" ]; then
                    RELEASE_NOTES=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
                  else
                    RELEASE_NOTES=$(git log --pretty=format:"- %s")
                  fi
                  echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
                  echo "$RELEASE_NOTES" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

            - name: Create GitHub Release with .tgz package
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ env.VERSION }}
                  name: Release v${{ env.VERSION }}
                  body: ${{ env.RELEASE_NOTES }}
                  files: ${{ env.PACKAGE_FILE }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create git tag and push it (if not exists)
              run: |
                  if git rev-parse "v$VERSION" >/dev/null 2>&1; then
                    echo "‚ö†Ô∏è Tag v$VERSION already exists locally."
                  else
                    git tag v$VERSION
                  fi

                  if git ls-remote --tags origin | grep -q "refs/tags/v$VERSION"; then
                    echo "‚úÖ Remote tag v$VERSION already exists. Skipping push."
                  else
                    echo "üöÄ Pushing tag v$VERSION to origin..."
                    git push origin v$VERSION
                  fi

            - name: Create Pull Request to master
              uses: peter-evans/create-pull-request@v5
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  commit-message: 'ci: merge release v${{ env.VERSION }} to master'
                  title: 'Release v${{ env.VERSION }}'
                  body: 'Automated PR to merge release branch into master.'
                  base: master
                  branch: ${{ env.BRANCH_NAME }}
